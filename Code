const canvas = document.getElementById("pong");
const context = canvas.getContext("2d");

// Paddle properties
const paddleWidth = 10;
const paddleHeight = 100;
const leftPaddle = {
  x: 0,
  y: canvas.height / 2 - paddleHeight / 2,
  dy: 0,
  speed: 5,
};
const rightPaddle = {
  x: canvas.width - paddleWidth,
  y: canvas.height / 2 - paddleHeight / 2,
  dy: 0,
  speed: 5,
};

// Ball properties
const ball = {
  x: canvas.width / 2,
  y: canvas.height / 2,
  dx: 5,
  dy: 5,
  radius: 10,
};

// Draw paddles
function drawPaddle(x, y) {
  context.fillStyle = "#fff";
  context.fillRect(x, y, paddleWidth, paddleHeight);
}

// Draw ball
function drawBall(x, y) {
  context.beginPath();
  context.arc(x, y, ball.radius, 0, Math.PI * 2);
  context.fillStyle = "#fff";
  context.fill();
  context.closePath();
}

// Update canvas
function update() {
  context.clearRect(0, 0, canvas.width, canvas.height);

  // Move paddles
  leftPaddle.y += leftPaddle.dy;
  rightPaddle.y += rightPaddle.dy;

  // Ensure paddles stay within the canvas
  leftPaddle.y = Math.max(0, Math.min(canvas.height - paddleHeight, leftPaddle.y));
  rightPaddle.y = Math.max(0, Math.min(canvas.height - paddleHeight, rightPaddle.y));

  // Draw paddles and ball
  drawPaddle(leftPaddle.x, leftPaddle.y);
  drawPaddle(rightPaddle.x, rightPaddle.y);
  drawBall(ball.x, ball.y);

  // Move ball
  ball.x += ball.dx;
  ball.y += ball.dy;

  // Ball collisions with top and bottom walls
  if (ball.y + ball.radius > canvas.height || ball.y - ball.radius < 0) {
    ball.dy *= -1;
  }

  // Ball collisions with paddles
  if (
    ball.x - ball.radius < leftPaddle.x + paddleWidth &&
    ball.x + ball.radius > leftPaddle.x &&
    ball.y > leftPaddle.y &&
    ball.y < leftPaddle.y + paddleHeight
  ) {
    ball.dx *= -1;
  }

  if (
    ball.x + ball.radius > rightPaddle.x &&
    ball.x - ball.radius < rightPaddle.x + paddleWidth &&
    ball.y > rightPaddle.y &&
    ball.y < rightPaddle.y + paddleHeight
  ) {
    ball.dx *= -1;
  }

  // Ball out of bounds
  if (ball.x + ball.radius > canvas.width || ball.x - ball.radius < 0) {
    // You can handle scoring here
    // For simplicity, we'll reset the ball position
    ball.x = canvas.width / 2;
    ball.y = canvas.height / 2;
    ball.dx *= -1; // Reverse the ball's direction
  }

  requestAnimationFrame(update);
}

// Keyboard controls for paddles
document.addEventListener("keydown", function (event) {
  if (event.key === "ArrowUp") {
    rightPaddle.dy = -rightPaddle.speed;
  }
  if (event.key === "ArrowDown") {
    rightPaddle.dy = rightPaddle.speed;
  }
  if (event.key === "w") {
    leftPaddle.dy = -leftPaddle.speed;
  }
  if (event.key === "s") {
    leftPaddle.dy = leftPaddle.speed;
  }
});

document.addEventListener("keyup", function (event) {
  if (event.key === "ArrowUp" || event.key === "ArrowDown") {
    rightPaddle.dy = 0;
  }
  if (event.key === "w" || event.key === "s") {
    leftPaddle.dy = 0;
  }
});

// Start the game loop
update();
